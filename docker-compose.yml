version: '3'
services:
  web:
    container_name: web
    image: "shortener_url:latest"
    command: npm start
    ports:
      - "3000:3000"
    links:
      - redis
    depends_on:
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
     - NODE_ENV=production
     - APP_PORT=3000
     - APP_URL=https://link.cogati.com
     - REDIS_PORT=6379
     - REDIS_HOST=redis
  redis:
    container_name: redis
    hostname: redis
    image: redis:4.0.5-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./data:/data
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 1M
        reservations:
          cpus: '0.10'
          memory: 1M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  webserver:
    image: nginx:1.15-alpine
    container_name: webserver
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx-conf:/etc/nginx/conf.d
      - ./scripts/certbot/conf:/etc/letsencrypt
      - ./scripts/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./scripts/certbot/conf:/etc/letsencrypt
      - ./scripts/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
